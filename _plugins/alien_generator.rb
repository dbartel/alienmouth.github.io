module Jekyll
  $log = Logger.new(STDOUT)
  ## Generic IssuePage
  class IssuePage < Page
    def initialize(site, base, dir, issue, layout, name="index.html")
      @site = site
      @base = base
      @dir = dir
      @name = name
      self.process(@name)
      self.read_yaml(File.join(base, "_layouts"), layout)
      self.data = self.data.merge(issue)
    end
  end


  ## Holder for issue parsed from config
  class Issue
    $MONTHLY = "monthly"
    $QUARTERLY = "quarterly"
    def initialize(category, config)
      @title = config["title"]
      @type = config["type"]
      @vid = config["vid"]
      @authors = config["authors"] || []
      @category = category
      @amazon = config["amazon"]
      @price = config["price"]
    end
    
    # @return a list of pages generated by the issue
    def create_pages(site)
      pages = []

      # For monthly issues with authors, create a bio page
      if @type == $MONTHLY
        if !@authors.empty?
          # First match the post authors with the listed authors (so we can link to their piece from the bio page)
          $log.info("Category #{@category}")
          @authors.each do |author|
            site.categories[@category].each do |post|
              # $log.info("match #{author['name']} #{post['author']}")
              if post["author"] == author["name"]
                # post matches author, so map it to that url
                author["post"] = post.url
              end
            end
          end
          author_config = {"authors" => @authors, "title" => "people of #{@title}" }
          pages << IssuePage.new(site, site.source, "issue/#{@category}", author_config, "bio.html", "people.html")
        end
        config = {
          "title" => @title,
          "vid" => @vid,
          "posts" => @category }
        pages << IssuePage.new(site, site.source, "issue/#{@category}", config, "monthly.html")
      else
        config = {
          "title" => @title,
          "amazon" => @amazon,
          "price" => @price,
          "vid" => @vid,
          "authors" => @authors}
        pages << IssuePage.new(site, site.source, "issue/#{@category}", config, "quarterly.html")
      end
      return pages
    end
  end


  

  # Issue generator
  # Generates pages for 
  class IssueGenerator < Generator
    safe true
    $MONTHLY = "monthly"
    $QUARTERLY = "quarterly"

    
    def generate(site)
      site.data["index"].each do |issue|
        is = Issue.new(issue, site.data[issue]["issue"])
        site.pages.concat(is.create_pages(site))
      end
    end
  end
end


